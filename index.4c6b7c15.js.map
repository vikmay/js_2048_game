{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(cells = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.cells = cells;\n        this.restart();\n    }\n    slideAndMerge(row) {\n        const filteredRow = row.filter((val)=>val !== 0);\n        const newRow = [];\n        for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n            newRow.push(filteredRow[i] * 2);\n            this.score += filteredRow[i] * 2;\n            i++;\n        } else newRow.push(filteredRow[i]);\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const rotated = (board)=>{\n            return board[0].map((_, colIndex)=>board.map((row)=>row[colIndex]));\n        };\n        let moved = false;\n        if (direction === \"up\" || direction === \"down\") this.board = rotated(this.board);\n        for(let i = 0; i < 4; i++){\n            const row = direction === \"right\" || direction === \"down\" ? [\n                ...this.board[i]\n            ].reverse() : [\n                ...this.board[i]\n            ];\n            const newRow = this.slideAndMerge(row);\n            if (direction === \"right\" || direction === \"down\") newRow.reverse();\n            if (this.board[i].toString() !== newRow.toString()) {\n                this.board[i] = newRow;\n                moved = true;\n            }\n        }\n        if (direction === \"up\" || direction === \"down\") this.board = rotated(this.board);\n        if (moved) this.addRandomTitle();\n        this.checkGameOver();\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    checkGameOver() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n        else if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return true;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n        }\n        return false;\n    }\n    addRandomTitle() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((value, colIndex)=>{\n                if (value === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[randomIndex];\n            this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTitle();\n        this.addRandomTitle();\n    }\n    restart() {\n        this.board = this.cells.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button-start\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    state.forEach((row, rowIndex)=>{\n        row.forEach((value, colIndex)=>{\n            const cell = document.querySelector(`[data-position=\"${rowIndex}-${colIndex}\"]`);\n            if (!cell) return;\n            cell.textContent = value !== 0 ? value : \"\";\n            $09e991522ca7e64e$var$updateCellClass(cell, value);\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$updateCellClass(cell, value) {\n    cell.className = \"field-cell\";\n    if (value !== 0) cell.classList.add(`field-cell--${value}`);\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateMessages() {\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    switch(statusGame){\n        case \"win\":\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            break;\n        case \"idle\":\n            $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$updateScore();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    }\n});\nwindow.addEventListener(\"keydown\", (ev)=>{\n    switch(ev.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateMessages();\n});\n\n\n//# sourceMappingURL=index.4c6b7c15.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.button-start');\nconst scoreElement = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction updateBoard() {\n  const state = game.getState();\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      if (!cell) {\n        return;\n      }\n\n      cell.textContent = value !== 0 ? value : '';\n      updateCellClass(cell, value);\n    });\n  });\n}\n\nfunction updateCellClass(cell, value) {\n  cell.className = 'field-cell';\n\n  if (value !== 0) {\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.getScore();\n}\n\nfunction updateMessages() {\n  const statusGame = game.getStatus();\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  switch (statusGame) {\n    case 'win':\n      messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      break;\n    case 'idle':\n      messageStart.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateMessages();\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    updateBoard();\n    updateMessages();\n    updateScore();\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\nwindow.addEventListener('keydown', (ev) => {\n  switch (ev.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateBoard();\n  updateScore();\n  updateMessages();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    cells = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.cells = cells;\n    this.restart();\n  }\n\n  slideAndMerge(row) {\n    const filteredRow = row.filter((val) => val !== 0);\n    const newRow = [];\n\n    for (let i = 0; i < filteredRow.length; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        newRow.push(filteredRow[i] * 2);\n        this.score += filteredRow[i] * 2;\n        i++;\n      } else {\n        newRow.push(filteredRow[i]);\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const rotated = (board) => {\n      return board[0].map((_, colIndex) => board.map((row) => row[colIndex]));\n    };\n\n    let moved = false;\n\n    if (direction === 'up' || direction === 'down') {\n      this.board = rotated(this.board);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const row =\n        direction === 'right' || direction === 'down'\n          ? [...this.board[i]].reverse()\n          : [...this.board[i]];\n\n      const newRow = this.slideAndMerge(row);\n\n      if (direction === 'right' || direction === 'down') {\n        newRow.reverse();\n      }\n\n      if (this.board[i].toString() !== newRow.toString()) {\n        this.board[i] = newRow;\n        moved = true;\n      }\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      this.board = rotated(this.board);\n    }\n\n    if (moved) {\n      this.addRandomTitle();\n    }\n    this.checkGameOver();\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n  moveRight() {\n    this.move('right');\n  }\n  moveUp() {\n    this.move('up');\n  }\n  moveDown() {\n    this.move('down');\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addRandomTitle() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTitle();\n    this.addRandomTitle();\n  }\n\n  restart() {\n    this.board = this.cells.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","cells","restart","slideAndMerge","row","filteredRow","filter","val","newRow","i","length","push","score","move","direction","status","rotated","board","map","_","colIndex","moved","reverse","toString","addRandomTitle","checkGameOver","moveLeft","moveRight","moveUp","moveDown","some","includes","canMove","j","emptyCells","forEach","rowIndex","value","randomIndex","Math","floor","random","getScore","getState","getStatus","start","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$updateBoard","state","cell","textContent","className","classList","add","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$updateMessages","statusGame","remove","addEventListener","contains","window","ev","key"],"version":3,"file":"index.4c6b7c15.js.map"}